/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SGCompute.SR.proto */

#ifndef PROTOBUF_C_SGCompute_2eSR_2eproto__INCLUDED
#define PROTOBUF_C_SGCompute_2eSR_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _SGCompute__SR__RunInfo SGCompute__SR__RunInfo;
typedef struct _SGCompute__SR__RunInfo__Key SGCompute__SR__RunInfo__Key;
typedef struct _SGCompute__SR__Compute SGCompute__SR__Compute;
typedef struct _SGCompute__SR__Compute__FuncInfo SGCompute__SR__Compute__FuncInfo;
typedef struct _SGCompute__SR__ReceiveResult SGCompute__SR__ReceiveResult;
typedef struct _SGCompute__SR__RunResult SGCompute__SR__RunResult;


/* --- enums --- */


/* --- messages --- */

struct  _SGCompute__SR__RunInfo__Key
{
  ProtobufCMessage base;
  uint32_t index;
  uint32_t pos;
  uint32_t key;
};
#define SGCOMPUTE__SR__RUN_INFO__KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__run_info__key__descriptor) \
    , 0, 0, 0 }


struct  _SGCompute__SR__RunInfo
{
  ProtobufCMessage base;
  size_t n_inputkey;
  SGCompute__SR__RunInfo__Key **inputkey;
  size_t n_outputkey;
  SGCompute__SR__RunInfo__Key **outputkey;
  char *inputpiecedescribe;
  char *outputpiecedescribe;
};
#define SGCOMPUTE__SR__RUN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__run_info__descriptor) \
    , 0,NULL, 0,NULL, NULL, NULL }


struct  _SGCompute__SR__Compute__FuncInfo
{
  ProtobufCMessage base;
  char *formula;
  char *parameter;
  char *inputstype;
};
#define SGCOMPUTE__SR__COMPUTE__FUNC_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__compute__func_info__descriptor) \
    , NULL, NULL, NULL }


struct  _SGCompute__SR__Compute
{
  ProtobufCMessage base;
  SGCompute__SR__Compute__FuncInfo *sfuncinfo;
  SGCompute__SR__RunInfo *sruninfo;
};
#define SGCOMPUTE__SR__COMPUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__compute__descriptor) \
    , NULL, NULL }


struct  _SGCompute__SR__ReceiveResult
{
  ProtobufCMessage base;
  int32_t errorcode;
};
#define SGCOMPUTE__SR__RECEIVE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__receive_result__descriptor) \
    , 0 }


struct  _SGCompute__SR__RunResult
{
  ProtobufCMessage base;
  SGCompute__SR__RunInfo *runinfo;
  int32_t errorcode;
};
#define SGCOMPUTE__SR__RUN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__sr__run_result__descriptor) \
    , NULL, 0 }


/* SGCompute__SR__RunInfo__Key methods */
void   sgcompute__sr__run_info__key__init
                     (SGCompute__SR__RunInfo__Key         *message);
/* SGCompute__SR__RunInfo methods */
void   sgcompute__sr__run_info__init
                     (SGCompute__SR__RunInfo         *message);
size_t sgcompute__sr__run_info__get_packed_size
                     (const SGCompute__SR__RunInfo   *message);
size_t sgcompute__sr__run_info__pack
                     (const SGCompute__SR__RunInfo   *message,
                      uint8_t             *out);
size_t sgcompute__sr__run_info__pack_to_buffer
                     (const SGCompute__SR__RunInfo   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__SR__RunInfo *
       sgcompute__sr__run_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__sr__run_info__free_unpacked
                     (SGCompute__SR__RunInfo *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__SR__Compute__FuncInfo methods */
void   sgcompute__sr__compute__func_info__init
                     (SGCompute__SR__Compute__FuncInfo         *message);
/* SGCompute__SR__Compute methods */
void   sgcompute__sr__compute__init
                     (SGCompute__SR__Compute         *message);
size_t sgcompute__sr__compute__get_packed_size
                     (const SGCompute__SR__Compute   *message);
size_t sgcompute__sr__compute__pack
                     (const SGCompute__SR__Compute   *message,
                      uint8_t             *out);
size_t sgcompute__sr__compute__pack_to_buffer
                     (const SGCompute__SR__Compute   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__SR__Compute *
       sgcompute__sr__compute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__sr__compute__free_unpacked
                     (SGCompute__SR__Compute *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__SR__ReceiveResult methods */
void   sgcompute__sr__receive_result__init
                     (SGCompute__SR__ReceiveResult         *message);
size_t sgcompute__sr__receive_result__get_packed_size
                     (const SGCompute__SR__ReceiveResult   *message);
size_t sgcompute__sr__receive_result__pack
                     (const SGCompute__SR__ReceiveResult   *message,
                      uint8_t             *out);
size_t sgcompute__sr__receive_result__pack_to_buffer
                     (const SGCompute__SR__ReceiveResult   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__SR__ReceiveResult *
       sgcompute__sr__receive_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__sr__receive_result__free_unpacked
                     (SGCompute__SR__ReceiveResult *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__SR__RunResult methods */
void   sgcompute__sr__run_result__init
                     (SGCompute__SR__RunResult         *message);
size_t sgcompute__sr__run_result__get_packed_size
                     (const SGCompute__SR__RunResult   *message);
size_t sgcompute__sr__run_result__pack
                     (const SGCompute__SR__RunResult   *message,
                      uint8_t             *out);
size_t sgcompute__sr__run_result__pack_to_buffer
                     (const SGCompute__SR__RunResult   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__SR__RunResult *
       sgcompute__sr__run_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__sr__run_result__free_unpacked
                     (SGCompute__SR__RunResult *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SGCompute__SR__RunInfo__Key_Closure)
                 (const SGCompute__SR__RunInfo__Key *message,
                  void *closure_data);
typedef void (*SGCompute__SR__RunInfo_Closure)
                 (const SGCompute__SR__RunInfo *message,
                  void *closure_data);
typedef void (*SGCompute__SR__Compute__FuncInfo_Closure)
                 (const SGCompute__SR__Compute__FuncInfo *message,
                  void *closure_data);
typedef void (*SGCompute__SR__Compute_Closure)
                 (const SGCompute__SR__Compute *message,
                  void *closure_data);
typedef void (*SGCompute__SR__ReceiveResult_Closure)
                 (const SGCompute__SR__ReceiveResult *message,
                  void *closure_data);
typedef void (*SGCompute__SR__RunResult_Closure)
                 (const SGCompute__SR__RunResult *message,
                  void *closure_data);

/* --- services --- */

typedef struct _SGCompute__SR__ComputeResponser_Service SGCompute__SR__ComputeResponser_Service;
struct _SGCompute__SR__ComputeResponser_Service
{
  ProtobufCService base;
  void (*by_info)(SGCompute__SR__ComputeResponser_Service *service,
                  const SGCompute__SR__Compute *input,
                  SGCompute__SR__ReceiveResult_Closure closure,
                  void *closure_data);
};
typedef void (*SGCompute__SR__ComputeResponser_ServiceDestroy)(SGCompute__SR__ComputeResponser_Service *);
void sgcompute__sr__compute_responser__init (SGCompute__SR__ComputeResponser_Service *service,
                                             SGCompute__SR__ComputeResponser_ServiceDestroy destroy);
#define SGCOMPUTE__SR__COMPUTE_RESPONSER__BASE_INIT \
    { &sgcompute__sr__compute_responser__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SGCOMPUTE__SR__COMPUTE_RESPONSER__INIT(function_prefix__) \
    { SGCOMPUTE__SR__COMPUTE_RESPONSER__BASE_INIT,\
      function_prefix__ ## by_info  }
void sgcompute__sr__compute_responser__by_info(ProtobufCService *service,
                                               const SGCompute__SR__Compute *input,
                                               SGCompute__SR__ReceiveResult_Closure closure,
                                               void *closure_data);
typedef struct _SGCompute__SR__ComputeServerWaiter_Service SGCompute__SR__ComputeServerWaiter_Service;
struct _SGCompute__SR__ComputeServerWaiter_Service
{
  ProtobufCService base;
  void (*by_result)(SGCompute__SR__ComputeServerWaiter_Service *service,
                    const SGCompute__SR__RunResult *input,
                    SGCompute__SR__ReceiveResult_Closure closure,
                    void *closure_data);
};
typedef void (*SGCompute__SR__ComputeServerWaiter_ServiceDestroy)(SGCompute__SR__ComputeServerWaiter_Service *);
void sgcompute__sr__compute_server_waiter__init (SGCompute__SR__ComputeServerWaiter_Service *service,
                                                 SGCompute__SR__ComputeServerWaiter_ServiceDestroy destroy);
#define SGCOMPUTE__SR__COMPUTE_SERVER_WAITER__BASE_INIT \
    { &sgcompute__sr__compute_server_waiter__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SGCOMPUTE__SR__COMPUTE_SERVER_WAITER__INIT(function_prefix__) \
    { SGCOMPUTE__SR__COMPUTE_SERVER_WAITER__BASE_INIT,\
      function_prefix__ ## by_result  }
void sgcompute__sr__compute_server_waiter__by_result(ProtobufCService *service,
                                                     const SGCompute__SR__RunResult *input,
                                                     SGCompute__SR__ReceiveResult_Closure closure,
                                                     void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sgcompute__sr__run_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__sr__run_info__key__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__sr__compute__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__sr__compute__func_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__sr__receive_result__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__sr__run_result__descriptor;
extern const ProtobufCServiceDescriptor sgcompute__sr__compute_responser__descriptor;
extern const ProtobufCServiceDescriptor sgcompute__sr__compute_server_waiter__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_SGCompute_2eSR_2eproto__INCLUDED */
