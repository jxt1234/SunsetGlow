#ifndef SRC_COMPUTE_SGCOMPUTE_H
#define SRC_COMPUTE_SGCOMPUTE_H
/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SGCompute.CS.proto */
#ifndef PROTOBUF_C_SGCompute_2eCS_2eproto__INCLUDED
#define PROTOBUF_C_SGCompute_2eCS_2eproto__INCLUDED
#include <protobuf-c/protobuf-c.h>
PROTOBUF_C__BEGIN_DECLS
#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif
typedef struct _SGCompute__CS__PieceInfo SGCompute__CS__PieceInfo;
typedef struct _SGCompute__CS__ComputeInfo SGCompute__CS__ComputeInfo;
typedef struct _SGCompute__CS__ExecuteInfo SGCompute__CS__ExecuteInfo;
typedef struct _SGCompute__CS__ExecuteInfo__Key SGCompute__CS__ExecuteInfo__Key;
typedef struct _SGCompute__CS__ExecuteInfo__FuncInfo SGCompute__CS__ExecuteInfo__FuncInfo;
typedef struct _SGCompute__CS__ExecuteInfo__FormulaInfo SGCompute__CS__ExecuteInfo__FormulaInfo;
typedef struct _SGCompute__CS__Result SGCompute__CS__Result;
typedef struct _SGCompute__CS__CopyInfo SGCompute__CS__CopyInfo;
/* --- enums --- */
/* --- messages --- */
struct  _SGCompute__CS__PieceInfo
{
  ProtobufCMessage base;
  char *path;
  char *datatype;
  /*
   *0: input, 1:cache, 2:output
   */
  uint32_t piecetype;
  size_t n_keydimesion;
  uint32_t *keydimesion;
};
#define SGCOMPUTE__CS__PIECE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__piece_info__descriptor) \
    , NULL, NULL, 0, 0,NULL }
struct  _SGCompute__CS__ComputeInfo
{
  ProtobufCMessage base;
  uint64_t executor;
  size_t n_inputpieces;
  uint64_t *inputpieces;
  uint64_t outputpiece;
};
#define SGCOMPUTE__CS__COMPUTE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__compute_info__descriptor) \
    , 0, 0,NULL, 0 }
struct  _SGCompute__CS__ExecuteInfo__Key
{
  ProtobufCMessage base;
  uint32_t index;
  uint32_t pos;
};
#define SGCOMPUTE__CS__EXECUTE_INFO__KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__execute_info__key__descriptor) \
    , 0, 0 }
struct  _SGCompute__CS__ExecuteInfo__FuncInfo
{
  ProtobufCMessage base;
  char *formula;
  char *parameter;
  char *inputstype;
  size_t n_variablekey;
  SGCompute__CS__ExecuteInfo__Key **variablekey;
};
#define SGCOMPUTE__CS__EXECUTE_INFO__FUNC_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__execute_info__func_info__descriptor) \
    , NULL, NULL, NULL, 0,NULL }
struct  _SGCompute__CS__ExecuteInfo__FormulaInfo
{
  ProtobufCMessage base;
  char *sconditionformula;
  char *svariableinfo;
};
#define SGCOMPUTE__CS__EXECUTE_INFO__FORMULA_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__execute_info__formula_info__descriptor) \
    , NULL, NULL }
struct  _SGCompute__CS__ExecuteInfo
{
  ProtobufCMessage base;
  SGCompute__CS__ExecuteInfo__FuncInfo *sfuncinfo;
  SGCompute__CS__ExecuteInfo__FormulaInfo *sconditioninfo;
  size_t n_outputkey;
  SGCompute__CS__ExecuteInfo__Key **outputkey;
  uint32_t type;
};
#define SGCOMPUTE__CS__EXECUTE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__execute_info__descriptor) \
    , NULL, NULL, 0,NULL, 0 }
struct  _SGCompute__CS__Result
{
  ProtobufCMessage base;
  /*
   *0: success, 1:fail
   */
  uint32_t code;
  uint64_t magic;
};
#define SGCOMPUTE__CS__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__result__descriptor) \
    , 0, 0 }
struct  _SGCompute__CS__CopyInfo
{
  ProtobufCMessage base;
  uint64_t read_magic;
  uint64_t write_magic;
};
#define SGCOMPUTE__CS__COPY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgcompute__cs__copy_info__descriptor) \
    , 0, 0 }
/* SGCompute__CS__PieceInfo methods */
void   sgcompute__cs__piece_info__init
                     (SGCompute__CS__PieceInfo         *message);
size_t sgcompute__cs__piece_info__get_packed_size
                     (const SGCompute__CS__PieceInfo   *message);
size_t sgcompute__cs__piece_info__pack
                     (const SGCompute__CS__PieceInfo   *message,
                      uint8_t             *out);
size_t sgcompute__cs__piece_info__pack_to_buffer
                     (const SGCompute__CS__PieceInfo   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__CS__PieceInfo *
       sgcompute__cs__piece_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__cs__piece_info__free_unpacked
                     (SGCompute__CS__PieceInfo *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__CS__ComputeInfo methods */
void   sgcompute__cs__compute_info__init
                     (SGCompute__CS__ComputeInfo         *message);
size_t sgcompute__cs__compute_info__get_packed_size
                     (const SGCompute__CS__ComputeInfo   *message);
size_t sgcompute__cs__compute_info__pack
                     (const SGCompute__CS__ComputeInfo   *message,
                      uint8_t             *out);
size_t sgcompute__cs__compute_info__pack_to_buffer
                     (const SGCompute__CS__ComputeInfo   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__CS__ComputeInfo *
       sgcompute__cs__compute_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__cs__compute_info__free_unpacked
                     (SGCompute__CS__ComputeInfo *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__CS__ExecuteInfo__Key methods */
void   sgcompute__cs__execute_info__key__init
                     (SGCompute__CS__ExecuteInfo__Key         *message);
/* SGCompute__CS__ExecuteInfo__FuncInfo methods */
void   sgcompute__cs__execute_info__func_info__init
                     (SGCompute__CS__ExecuteInfo__FuncInfo         *message);
/* SGCompute__CS__ExecuteInfo__FormulaInfo methods */
void   sgcompute__cs__execute_info__formula_info__init
                     (SGCompute__CS__ExecuteInfo__FormulaInfo         *message);
/* SGCompute__CS__ExecuteInfo methods */
void   sgcompute__cs__execute_info__init
                     (SGCompute__CS__ExecuteInfo         *message);
size_t sgcompute__cs__execute_info__get_packed_size
                     (const SGCompute__CS__ExecuteInfo   *message);
size_t sgcompute__cs__execute_info__pack
                     (const SGCompute__CS__ExecuteInfo   *message,
                      uint8_t             *out);
size_t sgcompute__cs__execute_info__pack_to_buffer
                     (const SGCompute__CS__ExecuteInfo   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__CS__ExecuteInfo *
       sgcompute__cs__execute_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__cs__execute_info__free_unpacked
                     (SGCompute__CS__ExecuteInfo *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__CS__Result methods */
void   sgcompute__cs__result__init
                     (SGCompute__CS__Result         *message);
size_t sgcompute__cs__result__get_packed_size
                     (const SGCompute__CS__Result   *message);
size_t sgcompute__cs__result__pack
                     (const SGCompute__CS__Result   *message,
                      uint8_t             *out);
size_t sgcompute__cs__result__pack_to_buffer
                     (const SGCompute__CS__Result   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__CS__Result *
       sgcompute__cs__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__cs__result__free_unpacked
                     (SGCompute__CS__Result *message,
                      ProtobufCAllocator *allocator);
/* SGCompute__CS__CopyInfo methods */
void   sgcompute__cs__copy_info__init
                     (SGCompute__CS__CopyInfo         *message);
size_t sgcompute__cs__copy_info__get_packed_size
                     (const SGCompute__CS__CopyInfo   *message);
size_t sgcompute__cs__copy_info__pack
                     (const SGCompute__CS__CopyInfo   *message,
                      uint8_t             *out);
size_t sgcompute__cs__copy_info__pack_to_buffer
                     (const SGCompute__CS__CopyInfo   *message,
                      ProtobufCBuffer     *buffer);
SGCompute__CS__CopyInfo *
       sgcompute__cs__copy_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgcompute__cs__copy_info__free_unpacked
                     (SGCompute__CS__CopyInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */
typedef void (*SGCompute__CS__PieceInfo_Closure)
                 (const SGCompute__CS__PieceInfo *message,
                  void *closure_data);
typedef void (*SGCompute__CS__ComputeInfo_Closure)
                 (const SGCompute__CS__ComputeInfo *message,
                  void *closure_data);
typedef void (*SGCompute__CS__ExecuteInfo__Key_Closure)
                 (const SGCompute__CS__ExecuteInfo__Key *message,
                  void *closure_data);
typedef void (*SGCompute__CS__ExecuteInfo__FuncInfo_Closure)
                 (const SGCompute__CS__ExecuteInfo__FuncInfo *message,
                  void *closure_data);
typedef void (*SGCompute__CS__ExecuteInfo__FormulaInfo_Closure)
                 (const SGCompute__CS__ExecuteInfo__FormulaInfo *message,
                  void *closure_data);
typedef void (*SGCompute__CS__ExecuteInfo_Closure)
                 (const SGCompute__CS__ExecuteInfo *message,
                  void *closure_data);
typedef void (*SGCompute__CS__Result_Closure)
                 (const SGCompute__CS__Result *message,
                  void *closure_data);
typedef void (*SGCompute__CS__CopyInfo_Closure)
                 (const SGCompute__CS__CopyInfo *message,
                  void *closure_data);
/* --- services --- */
typedef struct _SGCompute__CS__ComputeServer_Service SGCompute__CS__ComputeServer_Service;
struct _SGCompute__CS__ComputeServer_Service
{
  ProtobufCService base;
  void (*create_executor)(SGCompute__CS__ComputeServer_Service *service,
                          const SGCompute__CS__ExecuteInfo *input,
                          SGCompute__CS__Result_Closure closure,
                          void *closure_data);
  void (*execute)(SGCompute__CS__ComputeServer_Service *service,
                  const SGCompute__CS__ComputeInfo *input,
                  SGCompute__CS__Result_Closure closure,
                  void *closure_data);
  void (*create)(SGCompute__CS__ComputeServer_Service *service,
                 const SGCompute__CS__PieceInfo *input,
                 SGCompute__CS__Result_Closure closure,
                 void *closure_data);
  void (*release)(SGCompute__CS__ComputeServer_Service *service,
                  const SGCompute__CS__Result *input,
                  SGCompute__CS__Result_Closure closure,
                  void *closure_data);
  void (*copy)(SGCompute__CS__ComputeServer_Service *service,
               const SGCompute__CS__CopyInfo *input,
               SGCompute__CS__Result_Closure closure,
               void *closure_data);
};
typedef void (*SGCompute__CS__ComputeServer_ServiceDestroy)(SGCompute__CS__ComputeServer_Service *);
void sgcompute__cs__compute_server__init (SGCompute__CS__ComputeServer_Service *service,
                                          SGCompute__CS__ComputeServer_ServiceDestroy destroy);
#define SGCOMPUTE__CS__COMPUTE_SERVER__BASE_INIT \
    { &sgcompute__cs__compute_server__descriptor, protobuf_c_service_invoke_internal, NULL }
#define SGCOMPUTE__CS__COMPUTE_SERVER__INIT(function_prefix__) \
    { SGCOMPUTE__CS__COMPUTE_SERVER__BASE_INIT,\
      function_prefix__ ## create_executor,\
      function_prefix__ ## execute,\
      function_prefix__ ## create,\
      function_prefix__ ## release,\
      function_prefix__ ## copy  }
void sgcompute__cs__compute_server__create_executor(ProtobufCService *service,
                                                    const SGCompute__CS__ExecuteInfo *input,
                                                    SGCompute__CS__Result_Closure closure,
                                                    void *closure_data);
void sgcompute__cs__compute_server__execute(ProtobufCService *service,
                                            const SGCompute__CS__ComputeInfo *input,
                                            SGCompute__CS__Result_Closure closure,
                                            void *closure_data);
void sgcompute__cs__compute_server__create(ProtobufCService *service,
                                           const SGCompute__CS__PieceInfo *input,
                                           SGCompute__CS__Result_Closure closure,
                                           void *closure_data);
void sgcompute__cs__compute_server__release(ProtobufCService *service,
                                            const SGCompute__CS__Result *input,
                                            SGCompute__CS__Result_Closure closure,
                                            void *closure_data);
void sgcompute__cs__compute_server__copy(ProtobufCService *service,
                                         const SGCompute__CS__CopyInfo *input,
                                         SGCompute__CS__Result_Closure closure,
                                         void *closure_data);
/* --- descriptors --- */
extern const ProtobufCMessageDescriptor sgcompute__cs__piece_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__compute_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__execute_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__execute_info__key__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__execute_info__func_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__execute_info__formula_info__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__result__descriptor;
extern const ProtobufCMessageDescriptor sgcompute__cs__copy_info__descriptor;
extern const ProtobufCServiceDescriptor sgcompute__cs__compute_server__descriptor;
PROTOBUF_C__END_DECLS
#endif  /* PROTOBUF_C_SGCompute_2eCS_2eproto__INCLUDED */
#endif
